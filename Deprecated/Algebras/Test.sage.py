
# This file was *autogenerated* from the file Test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4)
load('Algebras/Generator.sage')
load('Algebras/SignSequence.sage')
load('Algebras/AlgElement.sage')
load('Algebras/AMinus.sage')

# These are the examples in Figure 2 of Intro To Tangle Floer
a = SignSequence([-_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,-_sage_const_1 ])
b = Generator(a,[_sage_const_4 ,_sage_const_2 ,-_sage_const_1 ,_sage_const_1 ,-_sage_const_1 ])
c = b.differential()
print c.dict

d = Generator(a,[-_sage_const_1 ,-_sage_const_1 ,-_sage_const_1 ,_sage_const_2 ,_sage_const_1 ])
e = Generator(a,[-_sage_const_1 ,_sage_const_0 ,_sage_const_1 ,-_sage_const_1 ,-_sage_const_1 ])
print (d*e).dict

am = AMinus([-_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,-_sage_const_1 ])
g1 = Generator(SignSequence([-_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,-_sage_const_1 ]),[-_sage_const_1 ,-_sage_const_1 ,-_sage_const_1 ,_sage_const_2 ,_sage_const_1 ])
g2 = Generator(SignSequence([-_sage_const_1 ,_sage_const_1 ,_sage_const_1 ,-_sage_const_1 ]),[-_sage_const_1 ,_sage_const_0 ,_sage_const_1 ,-_sage_const_1 ,-_sage_const_1 ])
prod =  am.multiply_in_algebra(g1,g2)
print prod

